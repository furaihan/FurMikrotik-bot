:local send [:parse [/system script get tg_sendMessage source]]
:local sendaudio [:parse [/system script get tg_sendAudio source]]
:local tolower [:parse [/system script get func_lowercase source]]
:local gkey [:parse [/system script get tg_getkey source]]
:local param1 [:pick $params 0 [:find $params " "]]
:local param2 [:pick $params ([:find $params " "]+1) [:len $params]]
:local param3 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] ([:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]+1) [:len [:pick $params ([:find $params " "]+1) [:len $params]]]]
:if ([:len [:find $param2 " "]]>0) do={
	:set param2 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] 0 [:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]]
} else={
	:set param3 ""
}

:put $params
:put $param1
:put $param2
:put $param3
:put $chatid
:put $from

:local ConvertUpperCase do={
	:local alphabet {"a"="A";"b"="B";"c"="C";"d"="D";"e"="E";"f"="F";"g"="G";"h"="H";"i"="I";"j"="J";"k"="K";"l"="L";"m"="M";"n"="N";"o"="O";"p"="P";"q"="Q";"r"="R";"s"="S";"t"="T";"u"="U";"v"="V";"x"="X";"z"="Z";"y"="Y";"w"="W"};
	:local result;
	:local character;
	:for strings from=0 to=([:len $1] - 1) do={
		:local single [:pick $1 $strings];
		:set character ($alphabet->$single);
		:if ([:typeof $character] = "str") do={set single $character}
		:set result ($result.$single);
	}
	:return $result
}


:local paramsLower [$tolower $params]

:if ($paramsLower = "help") do={
	$send chat=$chatid text="%3D%3D%3D%3D%3D%3D%3D%3D%3D%20DEFINE%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%0AUsed%20to%20define%20a%20given%20word.%20Definition%20taken%20from%20Google%20Dictionary%20(https%3A%2F%2Fgithub.com%2FmeetDeveloper%2FgoogleDictionaryAPI)%0A%0AUse%3A%0A%2Fdefine%20word%0AExample%3A%0A%2Fdefine%20supercalifragilisticexpialidocious%0A%0ANote%3A%0A%3E%20This%20feature%20still%20has%20many%20bugs%2C%20due%20to%20limitations%20in%20scripting%20in%20RouterOS%0A%3E%20You%20cannot%20(yet)%20define%20a%20phrase%20containing%20two%20or%20more%20words"

}
:if ([:len $params] > 0) do={
	:if ( ([:typeof [:tostr $params]] = "str") and ([:len $param1] = 1) and ($paramsLower != "help") ) do={
		:do {
			:local khak ([/tool fetch http-header-field="content-type: application/json" url="https://api.dictionaryapi.dev/api/v2/entries/en/$params" output=user as-value ]->"data");
			:put khak;
			:local pron [$gkey key="audio" text=$khak];
			:local def [$gkey block=definitions key=definition text=$khak];
			:local cth [$gkey block=definitions key=example text=$khak];
			:local typ [$gkey block=meanings key=partOfSpeech text=$khak];
			:local mptri ([pick $pron ([find $pron "\""]+1) [find $pron ".mp3"]].".mp3");
			:local defitext;
			:set defitext ("*$[$ConvertUpperCase $params]*%0A%0A");
			:if ([:len $def] > 0) do={:set defitext ($defitext."$def%0A%0A"); }
			:if ([:len $typ] > 0) do={ :set defitext ($defitext."Parts of Speech: _$typ_ %0A"); }
			:if ([:len $cth] > 0) do={ :set defitext ($defitext."Example: $cth%0A"); }
			:if ([:len $typ] > 0) do={
				$send chat=$chatid text=("$defitext") mode="Markdown"
			} else={
				$send chat=$chatid text="Sorry%20pal%2C%20we%20couldn't%20find%20definitions%20for%20the%20word%20you%20were%20looking%20for"
			}
			:if ([:len $params] > 9) do={
				:put $mptri
				$sendaudio chat=$chatid audio=("$mptri")
			}
		} on-error={
			:local ertext ("*unknown error occurred*%0A");
			:local ertext ($ertext."Please try again later%0A%0A");
			:local ertext ($ertext."_Please be advised that this tool is still have some bugs due to Mikrotik RouterOS limitation itself, you can try this again but if you keep getting an error you can try to use another word_");
			$send chat=$chatid text=("$ertext") mode="Markdown"
		}
	} else={
		:if ($paramsLower != "help") do={
			$send chat=$chatid text=("$params%20cannot%20be%20defined%2C%20please%20type%20%2Fdefine%20help%20for%20more%20information") mode="Markdown"
		}
	}
} else={
	$send chat=$chatid text=("Actually, you need somethind to be defined, type */define help* for more information") mode="Markdown"
}
