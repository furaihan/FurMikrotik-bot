:local send [:parse [/system script get tg_sendMessage source]]
:local gkey [:parse [/system script get tg_getkey source]]
:local tolower [:parse [/system script get func_lowercase source]]
:local param1 [:pick $params 0 [:find $params " "]]
:local param2 [:pick $params ([:find $params " "]+1) [:len $params]]
:local param3 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] ([:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]+1) [:len [:pick $params ([:find $params " "]+1) [:len $params]]]]
:if ([:len [:find $param2 " "]]>0) do={
	:set param2 [:pick [:pick $params ([:find $params " "]+1) [:len $params]] 0 [:find [:pick $params ([:find $params " "]+1) [:len $params]] " "]]
} else={
	:set param3 ""
}

:local urlEncode do={
  :local Input [ :tostr $1 ];
  :local Return "";

  :if ([ :len $Input ] > 0) do={
    :local Chars " !\"#\$%&'()*+,:;<=>\?@[\\]^`{|}~-";
    :local Subs { "%20"; "%21"; "%22"; "%23"; "%24"; "%25"; "%26"; "%27"; "%28"; "%29";
                  "%2A"; "%2B"; "%2C"; "%3A"; "%3B"; "%3C"; "%3D"; "%3E"; "%3F"; "%40";
                  "%5B"; "%5C"; "%5D"; "%5E"; "%60"; "%7B"; "%7C"; "%7D"; "%7E"; "%20" };

    :for I from=0 to=([ :len $Input ] - 1) do={
      :local Char [ :pick $Input $I ];
      :local Replace [ :find $Chars $Char ];

      :if ([ :len $Replace ] > 0) do={
        :set Char ($Subs->$Replace);
      }
      :set Return ($Return . $Char);
    }
  }
	:return $Return;
}

:local paramsLower [$tolower $params]
:put $paramsLower

:local alternativeMention {"united states of america"="usa"; "saudi"="saudi arabia"; "uk"="united kingdom"; "wales"="united kingdom"; "england"="united kingdom"; "scotland"="united kingdom"; "america"="usa"}
:if ([:typeof ($alternativeMention -> $paramsLower)] = "str") do={:set paramsLower ($alternativeMention -> $paramsLower)}
:put $paramsLower

:local paramsEncode [$urlEncode $paramsLower]
:put $paramsEncode

:local ConvertUpperCase do={
	:local alphabet {"a"="A";"b"="B";"c"="C";"d"="D";"e"="E";"f"="F";"g"="G";"h"="H";"i"="I";"j"="J";"k"="K";"l"="L";"m"="M";"n"="N";"o"="O";"p"="P";"q"="Q";"r"="R";"s"="S";"t"="T";"u"="U";"v"="V";"x"="X";"z"="Z";"y"="Y";"w"="W"};
	:local result;
	:local character;
	:for strings from=0 to=([:len $1] - 1) do={
		:local single [:pick $1 $strings];
		:set character ($alphabet->$single);
		:if ([:typeof $character] = "str") do={set single $character}
		:set result ($result.$single);
	}
	:return $result
}

:if ($paramsLower = "help") do={
:local helptext ("Covid 19 spread, infection and recovery information%0A%0A")
:set helptext ($helptext."*Usage*:%0A")
:set helptext ($helptext."/corona _<country>_%0A%0A")
:set helptext ($helptext."*Example*:%0A")
:set helptext ($helptext."/corona _bosnia-and-herzegovina_%0A")
:set helptext ($helptext."/corona _indonesia_%0A%0A")
:put $helptext
$send chat=$chatid text=$helptext mode="Markdown"
}

:if ( ([:len $params] > 0) and ($paramsLower != "help") ) do={
	:do {
		:local dataCovid ([/tool fetch mode=https url="https://covid19.mathdro.id/api/countries/$paramsEncode/" output=user as-value]->"data");
		:local confirmedCases [$gkey block="confirmed" key="value" text=$dataCovid];
		:local recovered [$gkey block="recovered" key="value" text=$dataCovid];
		:local deaths [$gkey block="deaths" key="value" text=$dataCovid];
		:local activeCases ([:tonum $confirmedCases] - [:tonum $recovered] - [:tonum $deaths]);
		:local sendThisText ("*COVID 19 PANDEMIC IN $[$ConvertUpperCase $params]*%0A%0A");
		:set sendThisText ($sendThisText."*Confirmed Case*: $[:tonum $confirmedCases]%0A");
		:set sendThisText ($sendThisText."*Recovered*: $[:tonum $recovered]%0A");
		:set sendThisText ($sendThisText."*Deaths*: $[:tonum $deaths]%0A");
		:set sendThisText ($sendThisText."*Active Cases*: $[:tonum $activeCases]%0A");
		:if ([:len $confirmedCases] > 0) do={
			$send chat=$chatid text=$sendThisText mode="Markdown"
		} else={
			$send chat=$chatid text=("Sorry pal, we cannot find any data in $params") mode="Markdown"
		}
	} on-error={
		$send chat=$chatid text="Unknown error occurred, please try again later" mode="Markdown"
	}
} else={
	:if ($paramsLower != "help") do={
		:local dataCovid ([/tool fetch mode=https url="https://api.covid19api.com/world/total" output=user as-value]->"data");
		:put $dataCovid
		:local confirmedCases [$gkey key="TotalConfirmed" text=$dataCovid];
		:local deaths [$gkey key="TotalDeaths" text=$dataCovid];
		:local recovered [:pick $dataCovid ([:find $dataCovid "TotalRecovered"]+ [:len "TotalRecovered"] + 2) ([:len $dataCovid] - 2)];
		:put $recovered
		:local activeCases ([:tonum $confirmedCases] - [:tonum $recovered] - [:tonum $deaths]);
		:local sendThisText ("*COVID 19 PANDEMIC IN WORLDWIDE*%0A%0A");
		:set sendThisText ($sendThisText."*Confirmed Case*: $[:tonum $confirmedCases]%0A");
		:set sendThisText ($sendThisText."*Recovered*: $[:tonum $recovered]%0A");
		:set sendThisText ($sendThisText."*Deaths*: $[:tonum $deaths]%0A");
		:set sendThisText ($sendThisText."*Active Cases*: $[:tonum $activeCases]%0A");
		$send chat=$chatid text=$sendThisText mode="Markdown"
	}
}
